buildscript {
    ext {
        jacksonAnnotationsVersion = "2.9.8"
        javaxValidationVersion = "2.0.1.Final"
        log4jVersion = "2.11.2"
        lombokPluginVersion = "5.0.0-rc6"
        rabbitMQStreamVersion = "2.2.0.RELEASE"
        springBootVersion = "2.2.6.RELEASE"
//        springBootVersion = "2.1.9.RELEASE"
        snakeyamlVersion = "1.23"
        springWebfluxVersion = "2.1.6.RELEASE"
        springBootDependencyVersion = "1.0.6.RELEASE"
//        springCloudStreamReactiveVersion = "2.2.0.RELEASE"
        springCloudVersion = "Hoxton.SR3"
        springCloudStreamVersion = "Horsham.SR3"
    }

    repositories {
        mavenCentral()
        jcenter()
        maven { url("https://plugins.gradle.org/m2/") }
    }

    dependencies {
        classpath("org.yaml:snakeyaml:${snakeyamlVersion}")
    }
}

plugins {
    id "java-library"
    id "maven-publish"
    id "org.springframework.boot" version "${springBootVersion}" apply false
    id "io.spring.dependency-management" version "${springBootDependencyVersion}" apply false
    id "io.freefair.lombok" version "${lombokPluginVersion}" apply false
}

repositories {
    mavenCentral()
    jcenter()
}

subprojects {
    apply plugin: "org.springframework.boot"
    apply plugin:"java"
    apply plugin:"jacoco"
    apply plugin:"maven-publish"
    apply plugin:"io.spring.dependency-management"
    apply plugin:"io.freefair.lombok"

    // In this section you declare where to find the dependencies of your project
    repositories {
        jcenter()
        mavenCentral()
        maven { url("https://repo.spring.io/milestone") }
    }

    sourceCompatibility = JavaVersion.VERSION_11
    targetCompatibility = JavaVersion.VERSION_11

    configurations {
        developmentOnly
        runtimeClasspath {
            extendsFrom developmentOnly
        }
    }

    dependencies {
//        implementation("org.springframework.cloud:spring-cloud-stream-reactive:${springCloudStreamReactiveVersion}")
        implementation(platform("org.springframework.cloud:spring-cloud-dependencies:${springCloudVersion}"))
        implementation(platform("org.springframework.cloud:spring-cloud-stream-dependencies:${springCloudStreamVersion}"))

        implementation("org.springframework.boot:spring-boot-starter-jetty")
        implementation("org.springframework.boot:spring-boot-starter-actuator")
        implementation("org.springframework.cloud:spring-cloud-starter-stream-rabbit:${rabbitMQStreamVersion}")
        implementation("org.springframework.boot:spring-boot-starter-webflux") {
            exclude group: "org.springframework.boot", module: "spring-boot-starter-tomcat"
        }

        implementation("org.apache.logging.log4j:log4j-api:${log4jVersion}")
        implementation("com.fasterxml.jackson.core:jackson-annotations:${jacksonAnnotationsVersion}")
        implementation("org.yaml:snakeyaml")
        implementation("javax.validation:validation-api:${javaxValidationVersion}")

    }

    tasks.withType(JavaCompile) {
        options.compilerArgs << "-Xlint:unchecked" << "-Xlint:deprecation"
    }

    bootRun {
        if (project.hasProperty('args')) {
            args project.args.split(',')
        }
    }

    bootJar {
        launchScript()
    }

    jacoco {
        toolVersion = "0.8.2"
    }

    jacocoTestReport {
        reports {
            xml.enabled = false
            csv.enabled = false
            html.destination = rootProject.file("${buildDir}/reports/jacoco")
        }
    }

    check {
        finalizedBy jacocoTestReport
    }

    java {
        withJavadocJar()
        withSourcesJar()
    }

    lombok {
        config['lombok.addLombokGeneratedAnnotation'] = 'true'
        config['lombok.accessors.chain'] = 'true'
        config['lombok.log.fieldName'] = 'LOGGER'
        config['lombok.log.apacheCommons.flagUsage'] = 'error'
        config['lombok.log.flogger.flagUsage'] = 'error'
        config['lombok.log.jbosslog.flagUsage'] = 'error'
        config['lombok.log.javaUtilLogging.flagUsage'] = 'error'
        config['lombok.log.log4j.flagUsage'] = 'error'
        config['lombok.log.log4j2.flagUsage'] = 'error'
        config['lombok.log.xslf4j.flagUsage'] = 'error'
        config['config.stopBubbling'] = 'true'
    }
}
